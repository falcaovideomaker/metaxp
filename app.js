// Meta XP 2.3.1 ‚Äî est√°vel (sem BOM) ‚Äî cache-busting via SW + querystring
const $=(s,p=document)=>p.querySelector(s); const $$=(s,p=document)=>Array.from(p.querySelectorAll(s));

function todayKey(d=new Date()){return d.toISOString().slice(0,10)}
function ymdToDate(ymd){const [y,m,d]=ymd.split('-').map(n=>+n); return new Date(y,m-1,d)}
function addDays(d,n){const x=new Date(d); x.setDate(x.getDate()+n); return x}
function weekRange(base){const d=new Date(base); const day=d.getDay(); const mon=day===0?-6:1-day; const start=addDays(d,mon); return [start,addDays(start,6)]}
function monthRange(base){const d=new Date(base); return [new Date(d.getFullYear(),d.getMonth(),1), new Date(d.getFullYear(),d.getMonth()+1,0)]}

const store={load(){const raw=localStorage.getItem("metaxp23"); if(!raw) return {character:{name:"Aventureiro",level:1,xp:0,next:100},attributes:[],missions:[],completions:{},xpLog:[],gold:0,rewards:[],rewardsHistory:[]}; return JSON.parse(raw)}, save(d){localStorage.setItem("metaxp23",JSON.stringify(d))}}; let state=store.load()

function nextRequirement(prev){return Math.max(10,Math.round(prev*1.10))}
function diffMul(d){ if(d==='hard') return 2; if(d==='medium') return 1.5; return 1 }
function renderHeader(){ $("#charNameView").textContent=state.character.name; $("#charLevel").textContent=state.character.level; $("#charXP").textContent=state.character.xp; $("#charNext").textContent=state.character.next; const pct=Math.min(100,Math.round(100*state.character.xp/state.character.next)); $("#charXPFill").style.width=pct+"%"; $("#goldBalance").textContent=state.gold }

function findAttr(id){return state.attributes.find(a=>a.id===id)}
function grantXPCharacter(xp){ let c=state.character; c.xp+=xp; let leveled=false; while(c.xp>=c.next){ c.xp-=c.next; c.level+=1; c.next=nextRequirement(c.next); leveled=true } if(leveled) toast(`üéâ Subiu para o n√≠vel ${c.level}!`) }
function grantXPAttribute(id,xp){const a=findAttr(id); if(!a) return; a.xp=(a.xp||0)+xp; a.next=a.next||100; a.level=a.level||1; while(a.xp>=a.next){a.xp-=a.next; a.level+=1; a.next=nextRequirement(a.next)}}

$$(".tab").forEach(t=>t.addEventListener("click",()=>{ $$(".tab").forEach(x=>x.classList.remove("active")); t.classList.add("active"); const n=t.dataset.tab; $("#tab-missoes").style.display=n==="missoes"?"":"none"; $("#tab-atributos").style.display=n==="atributos"?"":"none"; $("#tab-calendario").style.display=n==="calendario"?"":"none"; $("#tab-rewards").style.display=n==="rewards"?"":"none"; $("#tab-config").style.display=n==="config"?"":"none" }))

$("#editCharBtn").onclick=()=>{ const name=prompt("Nome do personagem:", state.character.name||"Aventureiro"); if(name){ state.character.name=name; store.save(state); renderHeader(); }}

$("#addAttr").onclick=()=>{ const name=$("#newAttrName").value.trim(); if(!name) return alert("D√™ um nome ao atributo."); const id="a"+Math.random().toString(36).slice(2,8); state.attributes.push({id,name,level:1,xp:0,next:100}); $("#newAttrName").value=""; store.save(state); renderAttributes(); renderMissionModalAttrList() }
function renderAttributes(){ const wrap=$("#attrList"); wrap.innerHTML=""; if(state.attributes.length===0){$("#attrEmpty").style.display=""; return} $("#attrEmpty").style.display="none"; state.attributes.forEach(a=>{ const pct=Math.round(100*(a.xp||0)/(a.next||100)); const card=document.createElement("div"); card.className="card"; card.innerHTML=`<div class="row" style="align-items:center;"><div style="flex:1;"><div style="font-weight:900;">${a.name}</div><div class="small muted">Nv. ${a.level} ‚Äî ${(a.xp||0)}/${(a.next||100)} XP</div><div class="xpbar small" style="margin-top:6px;"><div class="bar"><div class="fill" style="width:${pct}%"></div></div></div></div><button class="chip" data-del="${a.id}">Excluir</button></div>`; wrap.appendChild(card) }); $$("button[data-del]").forEach(b=>b.onclick=()=>{ const id=b.getAttribute("data-del"); if(confirm("Excluir atributo? Miss√µes que o usam perder√£o essa refer√™ncia.")){ state.attributes=state.attributes.filter(x=>x.id!==id); state.missions.forEach(m=>m.attrXP=(m.attrXP||[]).filter(ax=>ax.attrId!==id)); store.save(state); renderAttributes(); renderMissionModalAttrList() } }) }

function missionOccurrencesInRange(missions,start,end){ const occs=[]; const sK=todayKey(start), eK=todayKey(end); missions.forEach(m=>{ if(m.recur==="once"){ if(m.date>=sK && m.date<=eK) occs.push({id:`${m.id}@${m.date}`,mission:m,date:m.date,time:m.time||"00:00"}) } else if(m.recur==="weekly"){ const w=m.weekdays||[]; let d=new Date(start); while(d<=end){ if(w.includes(d.getDay())){ const k=todayKey(d); if(k>=m.date) occs.push({id:`${m.id}@${k}`,mission:m,date:k,time:m.time||"00:00"}) } d=addDays(d,1) } } }); return occs }
function renderMissions(){ const list=$("#missionList"); list.innerHTML=""; const base=$("#baseDate").value? ymdToDate($("#baseDate").value): new Date(); const mode=$("#range").value; let start,end; if(mode==="day"){start=base; end=base} if(mode==="week"){[start,end]=weekRange(base)} if(mode==="month"){[start,end]=monthRange(base)} const occs=missionOccurrencesInRange(state.missions,start,end).sort((a,b)=>a.date.localeCompare(b.date)||a.time.localeCompare(b.time)); $("#missionEmpty").style.display=occs.length?"none":""; occs.forEach(occ=>{ const m=occ.mission; const completed=!!state.completions[occ.id]; const attrs=(m.attrXP||[]).map(ax=>{const attr=findAttr(ax.attrId); return attr? `<span class="attrTag">${attr.name}: +${Math.round((ax.xp||0)*diffMul(m.difficulty||'easy'))} XP</span>`:""}).join(" "); const wrap=document.createElement("div"); wrap.className="goal"; wrap.innerHTML=`<div class="meta"><div><strong>üó°Ô∏è ${m.title}</strong> ${completed?"‚úÖ":""} <span class="chip">üî• x${m.streak||0}</span></div><div class="small muted">${occ.date} ${(m.time||"")}</div><div class="small" style="margin-top:6px;"><span class="chip">Dif.: ${(m.difficulty||"easy")}</span><span class="chip">Personagem: ~+${Math.round((m.charXP||0)*diffMul(m.difficulty||"easy"))} XP</span>${attrs}</div></div><div class="actions">${completed? `<button data-undo="${occ.id}" class="chip">Desfazer</button>`:`<button data-done="${occ.id}" class="chip">Concluir</button>`}<button data-delm="${m.id}" class="chip">Excluir</button></div>`; list.appendChild(wrap) }); $$("button[data-done]").forEach(b=>b.onclick=()=>completeOccurrence(b.getAttribute("data-done"))); $$("button[data-undo]").forEach(b=>b.onclick=()=>undoOccurrence(b.getAttribute("data-undo"))); $$("button[data-delm]").forEach(b=>b.onclick=()=>{ const id=b.getAttribute("data-delm"); if(confirm("Excluir esta miss√£o?")){ state.missions=state.missions.filter(x=>x.id!==id); Object.keys(state.completions).forEach(k=>{if(k.startsWith(id+'@')) delete state.completions[k]}); store.save(state); renderMissions(); renderCalendar(); } }) }
function prevOccurrenceDate(m,dateKey){ if(m.recur==="once")return null; const d=ymdToDate(dateKey); for(let i=1;i<=28;i++){ const prev=addDays(d,-i); const k=todayKey(prev); if(k<m.date)break; if(m.recur==="weekly"){ const wd=prev.getDay(); if((m.weekdays||[]).includes(wd)) return k } } return null }
function completeOccurrence(occId){ if(state.completions[occId]) return; const [mId,date]=occId.split("@"); const m=state.missions.find(x=>x.id===mId); if(!m) return; const prevKey=prevOccurrenceDate(m,date); if(prevKey && state.completions[`${m.id}@${prevKey}`]) m.streak=(m.streak||0)+1; else m.streak=1; m.lastDone=date; const mul=diffMul(m.difficulty||'easy'); const charXP=Math.round((m.charXP||0)*mul); grantXPCharacter(charXP); (m.attrXP||[]).forEach(ax=>grantXPAttribute(ax.attrId, Math.round((ax.xp||0)*mul))); state.completions[occId]=true; state.xpLog.push({date, charXP, missionId:m.id, difficulty:(m.difficulty||'easy')}); store.save(state); renderHeader(); renderAttributes(); renderMissions(); renderCalendar(); }
function undoOccurrence(occId){ if(!state.completions[occId]) return; if(!confirm("Isso apenas desmarca a conclus√£o. O XP j√° concedido permanece. Continuar?")) return; delete state.completions[occId]; store.save(state); renderMissions(); renderCalendar(); }

$("#newMission").onclick=()=>{ openModal("#missionModal"); renderMissionModalAttrList() }
$("#createMission").onclick=()=>{ const title=$("#mTitle").value.trim(); if(!title) return alert("D√™ um t√≠tulo para a miss√£o."); const recur=$("#mRecur").value; const date=$("#mDate").value||todayKey(); const time=$("#mTime").value||"07:00"; const charXP=Math.max(0,parseInt($("#mXP").value||"0",10)); const payload={id:"m"+Math.random().toString(36).slice(2,8), title,recur,date,time, difficulty:($("#mDiff")? $("#mDiff").value : 'easy'), weekdays:recur==="weekly"?selectedWeekdays():[], charXP, attrXP:collectAttrAlloc(), streak:0, lastDone:null}; state.missions.push(payload); store.save(state); $("#mTitle").value=""; $("#mXP").value="10"; $("#mDate").value=""; $("#mTime").value="07:00"; $$("#mWeekdays input[type=checkbox]").forEach(cb=>cb.checked=false); $("#mAttrList").innerHTML=""; closeModal("#missionModal"); renderMissions(); renderCalendar() }
function openModal(s){$(s).style.display="flex"} function closeModal(s){$(s).style.display="none"}
function selectedWeekdays(){return $$("#mWeekdays input[type=checkbox]:checked").map(cb=>parseInt(cb.value,10))}
$("#addAttrAlloc").onclick=addAttrAllocLine
function renderMissionModalAttrList(){ const box=$("#mAttrList"); box.innerHTML=""; if(state.attributes.length===0){ box.innerHTML=`<p class="muted small">Sem atributos. Crie alguns na aba ‚ÄúAtributos‚Äù.</p>`; return } addAttrAllocLine() }
function addAttrAllocLine(){ const box=$("#mAttrList"); const line=document.createElement("div"); line.className="row"; const sel=document.createElement("select"); state.attributes.forEach(a=>{const o=document.createElement("option"); o.value=a.id; o.textContent=a.name; sel.appendChild(o)}); const xp=document.createElement("input"); xp.type="number"; xp.min="0"; xp.value="5"; xp.style.width="120px"; const del=document.createElement("button"); del.textContent="‚Äì"; del.onclick=()=>line.remove(); line.append(sel,xp,del); box.appendChild(line) }
function collectAttrAlloc(){ return $$("#mAttrList .row").map(l=>({attrId:$("select",l).value, xp:Math.max(0,parseInt($("input",l).value||"0",10))})) }

// Recompensas
function renderRewards(){ const list=$("#rewardList"); list.innerHTML=""; if(state.rewards.length===0){$("#rewardEmpty").style.display="";} else {$("#rewardEmpty").style.display="none";} state.rewards.forEach(r=>{ const row=document.createElement("div"); row.className="goal"; row.innerHTML=`<div class="meta"><div><strong>${r.name}</strong></div><div class="small muted">Custa ${r.cost} ü™ô</div></div><div class="actions"><button class="chip" data-buy="${r.id}">Comprar</button><button class="chip" data-delr="${r.id}">Excluir</button></div>`; list.appendChild(row) }); $$("button[data-buy]").forEach(b=>b.onclick=()=>{ const id=b.getAttribute("data-buy"); const r=state.rewards.find(x=>x.id===id); if(!r) return; if(state.gold<r.cost) return alert("Ouro insuficiente."); state.gold -= r.cost; state.rewardsHistory.unshift({date:todayKey(), name:r.name, cost:r.cost}); store.save(state); renderHeader(); renderRewards(); renderRewardHistory(); toast(`Voc√™ comprou "${r.name}" por ${r.cost} ü™ô`) }); $$("button[data-delr]").forEach(b=>b.onclick=()=>{ const id=b.getAttribute("data-delr"); if(confirm("Excluir esta recompensa?")){ state.rewards=state.rewards.filter(x=>x.id!==id); store.save(state); renderRewards() } }) }
$("#addReward").onclick=()=>{ const name=$("#rewardName").value.trim(); const cost=Math.max(1, parseInt($("#rewardCost").value||"1",10)); if(!name) return alert("D√™ um nome para a recompensa."); const id="r"+Math.random().toString(36).slice(2,8); state.rewards.push({id,name,cost}); $("#rewardName").value=""; $("#rewardCost").value="50"; store.save(state); renderRewards() }
function renderRewardHistory(){ const box=$("#rewardHistory"); const empty=$("#rewardHistoryEmpty"); box.innerHTML=""; if(state.rewardsHistory.length===0){ empty.style.display=""; return } empty.style.display="none"; state.rewardsHistory.forEach(h=>{ const row=document.createElement("div"); row.className="row"; row.innerHTML=`<span class="chip">${h.date}</span><span>${h.name}</span><span class="chip">-${h.cost} ü™ô</span>`; box.appendChild(row) }) }

// Calend√°rio
let calCursor=new Date()
function fmtMonthTitle(date){return date.toLocaleDateString('pt-BR',{month:'long',year:'numeric'})}
function renderCalendar(){ $("#calMonthTitle").textContent=fmtMonthTitle(calCursor); const grid=$("#calendarGrid"); grid.innerHTML=""; const y=calCursor.getFullYear(), m=calCursor.getMonth(); const first=new Date(y,m,1); const start=first.getDay(); const days=new Date(y,m+1,0).getDate(); for(let i=0;i<start;i++){const d=document.createElement("div"); d.style.visibility="hidden"; grid.appendChild(d)} for(let day=1;day<=days;day++){ const key=todayKey(new Date(y,m,day)); const count=state.xpLog.filter(x=>x.date===key).length; const cell=document.createElement("div"); cell.style.border="1px solid #2a2217"; cell.style.borderRadius="10px"; cell.style.background="#14100b"; cell.style.minHeight="56px"; cell.style.padding="6px"; cell.innerHTML=`<div style="font-size:12px; color:#bda77d;">${String(day).padStart(2,'0')}</div><div>${count>0? "‚úÖ√ó"+count:""}</div>`; grid.appendChild(cell) } }
$("#prevMonth").onclick=()=>{ calCursor=new Date(calCursor.getFullYear(),calCursor.getMonth()-1,1); renderCalendar() }
$("#nextMonth").onclick=()=>{ calCursor=new Date(calCursor.getFullYear(),calCursor.getMonth()+1,1); renderCalendar() }

// Export/Import
$("#exportBtn").onclick=()=>{ const data=JSON.stringify(state,null,2); const blob=new Blob([data],{type:"application/json"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url; a.download="metaxp_backup.json"; a.click(); URL.revokeObjectURL(url) }
$("#importFile").onchange=(e)=>{ const file=e.target.files[0]; if(!file) return; const reader=new FileReader(); reader.onload=()=>{ try{ const obj=JSON.parse(reader.result); state=obj; store.save(state); renderAll(); alert("Importa√ß√£o conclu√≠da!") }catch(err){ alert("Arquivo inv√°lido.") } }; reader.readAsText(file) }

// UI helpers
function toast(msg){ const el=document.createElement("div"); el.textContent=msg; el.style.position="fixed"; el.style.bottom="20px"; el.style.left="50%"; el.style.transform="translateX(-50%)"; el.style.background="#14100b"; el.style.border="1px solid #2a2217"; el.style.padding="10px 14px"; el.style.borderRadius="999px"; el.style.boxShadow="0 10px 30px #00000055"; el.style.zIndex="1000"; document.body.appendChild(el); setTimeout(()=>{el.remove()},1800) }

// Init
$("#range").value="day"; $("#baseDate").valueAsDate=new Date(); $("#range").onchange=renderMissions; $("#baseDate").onchange=renderMissions
function renderAll(){ renderHeader(); renderAttributes(); renderMissions(); renderCalendar(); renderRewards(); renderRewardHistory() }
renderAll()
